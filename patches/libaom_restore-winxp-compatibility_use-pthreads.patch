diff --git a/aom_ports/aom_once.h b/aom_ports/aom_once.h
index 354ed9d..d246a50 100644
--- a/aom_ports/aom_once.h
+++ b/aom_ports/aom_once.h
@@ -38,7 +38,14 @@
  * by the call to foo().
  */
 
-#if CONFIG_MULTITHREAD && defined(_WIN32)
+#if CONFIG_MULTITHREAD && HAVE_PTHREAD_H
+#include <pthread.h>
+static void aom_once(void (*func)(void)) {
+  static pthread_once_t lock = PTHREAD_ONCE_INIT;
+  pthread_once(&lock, func);
+}
+
+#elif CONFIG_MULTITHREAD && defined(_WIN32)
 #include <windows.h>
 /* Declare a per-compilation-unit state variable to track the progress
  * of calling func() only once. This must be at global scope because
@@ -58,13 +65,6 @@ static void aom_once(void (*func)(void)) {
   InitOnceComplete(&aom_init_once, 0, NULL);
 }
 
-#elif CONFIG_MULTITHREAD && HAVE_PTHREAD_H
-#include <pthread.h>
-static void aom_once(void (*func)(void)) {
-  static pthread_once_t lock = PTHREAD_ONCE_INIT;
-  pthread_once(&lock, func);
-}
-
 #else
 /* Default version that performs no synchronization. */
 
diff --git a/build/cmake/aom_configure.cmake b/build/cmake/aom_configure.cmake
index 39e5c53..a3b156f 100644
--- a/build/cmake/aom_configure.cmake
+++ b/build/cmake/aom_configure.cmake
@@ -241,7 +241,7 @@ endif()
 if(AOM_TARGET_SYSTEM STREQUAL "Windows")
   # The default _WIN32_WINNT value in MinGW is 0x0502 (Windows XP with SP2). Set
   # it to 0x0601 (Windows 7).
-  add_compiler_flag_if_supported("-D_WIN32_WINNT=0x0601")
+  #add_compiler_flag_if_supported("-D_WIN32_WINNT=0x0601")
   # Prevent windows.h from defining the min and max macros. This allows us to
   # use std::min and std::max.
   add_compiler_flag_if_supported("-DNOMINMAX")
