diff --git a/configure b/configure
index 080d93a..2e5215f 100755
--- a/configure
+++ b/configure
@@ -204,6 +204,7 @@ External library support:
   --disable-appkit         disable Apple AppKit framework [autodetect]
   --disable-avfoundation   disable Apple AVFoundation framework [autodetect]
   --enable-avisynth        enable reading of AviSynth script files [no]
+  --disable-bcrypt         disable bcrypt usage on win32, use wincrypt functions [no]
   --disable-bzlib          disable bzlib [autodetect]
   --disable-coreimage      disable Apple CoreImage framework [autodetect]
   --enable-chromaprint     enable audio fingerprinting with chromaprint [no]
@@ -1696,6 +1697,7 @@ EXTERNAL_AUTODETECT_LIBRARY_LIST="
     alsa
     appkit
     avfoundation
+    bcrypt
     bzlib
     coreimage
     iconv
@@ -6118,7 +6120,7 @@ check_headers asm/types.h
 check_builtin stdatomic stdatomic.h "atomic_int foo, bar = ATOMIC_VAR_INIT(-1); atomic_store(&foo, 0); foo += bar"
 
 check_lib advapi32 "windows.h"            RegCloseKey          -ladvapi32
-check_lib bcrypt   "windows.h bcrypt.h"   BCryptGenRandom      -lbcrypt &&
+enabled bcrypt && check_lib bcrypt "windows.h bcrypt.h" BCryptGenRandom -lbcrypt &&
     check_cpp_condition bcrypt bcrypt.h "defined BCRYPT_RNG_ALGORITHM"
 check_lib ole32    "windows.h"            CoTaskMemFree        -lole32
 check_lib shell32  "windows.h shellapi.h" CommandLineToArgvW   -lshell32
diff --git a/libavutil/random_seed.c b/libavutil/random_seed.c
index 70dc509..1f66b4d 100644
--- a/libavutil/random_seed.c
+++ b/libavutil/random_seed.c
@@ -26,9 +26,13 @@
 #if HAVE_IO_H
 #include <io.h>
 #endif
-#if HAVE_BCRYPT
+#ifdef _WIN32
 #include <windows.h>
+#if HAVE_BCRYPT
 #include <bcrypt.h>
+#else
+#include <wincrypt.h>
+#endif
 #endif
 #include <fcntl.h>
 #include <math.h>
@@ -45,6 +49,7 @@
 #define TEST 0
 #endif
 
+#ifndef _WIN32
 static int read_random(uint32_t *dst, const char *file)
 {
 #if HAVE_UNISTD_H
@@ -61,6 +66,7 @@ static int read_random(uint32_t *dst, const char *file)
     return -1;
 #endif
 }
+#endif
 
 static uint32_t get_generic_seed(void)
 {
@@ -131,15 +137,25 @@ uint32_t av_get_random_seed(void)
         if (BCRYPT_SUCCESS(ret))
             return seed;
     }
+#elif defined(_WIN32)
+    HCRYPTPROV hProvider;
+    if (CryptAcquireContext(&hProvider, NULL, NULL, PROV_RSA_FULL, CRYPT_VERIFYCONTEXT | CRYPT_SILENT)) {
+        BOOL ret = CryptGenRandom(hProvider, sizeof(seed), (BYTE*)&seed);
+        CryptReleaseContext(hProvider, 0);
+        if (ret)
+            return seed;
+    }
 #endif
 
 #if HAVE_ARC4RANDOM
     return arc4random();
 #endif
 
+#ifndef _WIN32
     if (read_random(&seed, "/dev/urandom") == sizeof(seed))
         return seed;
     if (read_random(&seed, "/dev/random")  == sizeof(seed))
         return seed;
+#endif
     return get_generic_seed();
 }
